import asyncio
import logging
from json import loads

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.exceptions import *
from aiogram.enums.inline_query_result_type import InlineQueryResultType
from aiogram.types import Message, FSInputFile, BufferedInputFile, ReplyKeyboardRemove, InlineQuery, \
    InlineQueryResultPhoto, InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import async_requests
from convertertoken import BOT_TOKEN, ADMIN_ID


class RGBForm(StatesGroup):
    count = State()


class HEXForm(StatesGroup):
    count = State()


class CMYKForm(StatesGroup):
    count = State()


storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)
ans_url = 'https://whatcolor.ru/color/'
ans_pic = 'https://via.placeholder.com/500x500/'
main_keyboard = types.ReplyKeyboardMarkup(keyboard=[
    [types.KeyboardButton(text='üé® –ò–∑ RGB'), types.KeyboardButton(text='üé® –ò–∑ CMYK'),
     types.KeyboardButton(text='üé® –ò–∑ HEX')],
    [types.KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), types.KeyboardButton(text='üåà–¶–≤–µ—Ç 2025 –≥–æ–¥–∞'),
     types.KeyboardButton(text='üîΩ –°–≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')]
], resize_keyboard=True)


@dp.message(Command(commands=['start', 'help']))
async def process_start_command(message: Message):
    bot_info = await bot.get_me()
    await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤! üëã\n\n'
                        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è‚å®Ô∏è\n'
                        f'–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ / –∏–ª–∏ @{bot_info.username}, —Ü–≤–µ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å, –∞ –∑–∞—Ç–µ–º –∑–Ω–∞—á–µ–Ω–∏—è‚úçÔ∏è\n\n'
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: üîç\n'
                        '/hex FFFFFF\n'
                        '/rgb 255 255 255\n'
                        f'@{bot_info.username} cmyk 0 0 0 0',
                        reply_markup=main_keyboard
                        )


@dp.message(Command(commands=['hex']))
async def process_hex_command(message: Message):
    message_args = message.text.split()

    if len(message_args) != 2:  # 2 —Ç.–∫. –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–ø–ª–∏—Ç–Ω—É—Ç—å—Å—è –Ω–∞ 1 –∞—Ä–≥—É–º–µ–Ω—Ç + –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        await message.reply(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nHEX-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F.',
            reply_markup=main_keyboard)
        return

    _, hex_ = message_args

    if len(hex_) == 6 or len(hex_) == 3:
        response = await async_requests.get_by_hex(hex_)
        await send_rgb_message(message, response)
        return

    await message.reply(
        '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nHEX-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F.',
        reply_markup=main_keyboard)


@dp.message(Command(commands=['rgb']))
async def process_rgb_command(message: Message):
    message_args = message.text.split()

    if len(message_args) != 4:  # 4 —Ç.–∫. –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–ø–ª–∏—Ç–Ω—É—Ç—å—Å—è –Ω–∞ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nRGB-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                            reply_markup=main_keyboard)
        return

    _, r, g, b = message_args

    if 0 <= int(r) <= 255 and 0 <= int(g) <= 255 and 0 <= int(b) <= 255:
        response = await async_requests.get_by_rgb(r, g, b)
        await send_rgb_message(message, response)
        return

    await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nRGB-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                        reply_markup=main_keyboard)


@dp.message(Command(commands=['cmyk']))
async def process_cmyk_command(message: Message):
    message_args = message.text.split()

    if len(message_args) != 5:  # 5 —Ç.–∫. –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–ø–ª–∏—Ç–Ω—É—Ç—å—Å—è –Ω–∞ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nCMYK-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                            reply_markup=main_keyboard)
        return

    _, c, m, y, k = message.text.split()

    if 0 <= int(c) <= 100 and 0 <= int(m) <= 100 and 0 <= int(y) <= 100 and 0 <= int(k) <= 100:
        response = await async_requests.get_by_cmyk(c, m, y, k)
        await send_rgb_message(message, response)
        return

    await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nCMYK-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 100.',
                        reply_markup=main_keyboard)


@dp.message(Command(commands=['year']))
async def process_year_command(message: Message):
    try:
        await message.reply_photo(photo=FSInputFile('year.png'),
                                  caption=f'‚ú®Pantone: 17-1230\n'
                                          f'‚ú®HEX: #A47864\n'
                                          f'‚ú®RGB: 164 120 100\n'
                                          f'‚ú®CMYK: 0 27 39 36\n'
                                          f'‚ú®https://whatcolor.ru/color/A47864',
                                  reply_markup=main_keyboard)

    except Exception as e:
        await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)
        await bot.send_message(ADMIN_ID,
                               f'{'@' + message.chat.username if message.chat.username
                               else 'tg://openmessage?user_id=' + str(message.chat.id)}\n{e}')


@dp.message(F.text == 'üé® –ò–∑ RGB')
async def button_rgb(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è R, G, B —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RGBForm.count)


@dp.message(RGBForm.count)
async def process_rgb_command(message: Message, state: FSMContext):
    message_args = message.text.split()

    if len(message_args) != 3:  # 3 —Ç.–∫. —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–ø–ª–∏—Ç–Ω—É—Ç—å—Å—è –Ω–∞ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nRGB-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                            reply_markup=main_keyboard)
        return

    r, g, b = map(int, message_args)
    await state.update_data(count=message.text)

    if 0 <= int(r) <= 255 and 0 <= int(g) <= 255 and 0 <= int(b) <= 255:
        response = await async_requests.get_by_rgb(r, g, b)
        await send_rgb_message(message, response)
        await state.clear()
        return

    await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nRGB-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                        reply_markup=main_keyboard)
    await state.clear()


@dp.message(F.text == 'üé® –ò–∑ HEX')
async def button_hex(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ HEX", reply_markup=ReplyKeyboardRemove())
    await state.set_state(HEXForm.count)


@dp.message(HEXForm.count)
async def process_hex_command(message: Message, state: FSMContext):

    hex_ = message.text
    await state.update_data(count=message.text)

    if len(hex_) == 6 or len(hex_) == 3:
        response = await async_requests.get_by_hex(hex_)
        await send_rgb_message(message, response)
        await state.clear()
        return

    await message.reply(
        '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nHEX-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F.',
        reply_markup=main_keyboard)
    await state.clear()


@dp.message(F.text == 'üé® –ò–∑ CMYK')
async def button_cmyk(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è C, M, Y, K —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CMYKForm.count)


@dp.message(CMYKForm.count)
async def process_cmyk_command(message: Message, state: FSMContext):
    message_args = message.text.split()

    if len(message_args) != 4:  # 4 —Ç.–∫. —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–ø–ª–∏—Ç–Ω—É—Ç—å—Å—è –Ω–∞ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nCMYK-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                            reply_markup=main_keyboard)
        return

    c, m, y, k = map(int, message_args)

    if 0 <= int(c) <= 100 and 0 <= int(m) <= 100 and 0 <= int(y) <= 100 and 0 <= int(k) <= 100:
        response = await async_requests.get_by_cmyk(c, m, y, k)
        await send_rgb_message(message, response)
        await state.clear()
        return

    await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nCMYK-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 100.',
                        reply_markup=main_keyboard)
    await state.clear()


@dp.message(F.text == 'üåà–¶–≤–µ—Ç 2025 –≥–æ–¥–∞')
async def color_of_year(message: Message):
    await message.reply_photo(photo=FSInputFile('year.png'),
                              caption=f'‚ú®Pantone: 17-1230\n'
                                      f'‚ú®HEX: #A47864\n'
                                      f'‚ú®RGB: 164 120 100\n'
                                      f'‚ú®CMYK: 0 27 39 36\n'
                                      f'‚ú®https://whatcolor.ru/color/A47864',
                              reply_markup=main_keyboard)


@dp.message(F.text == 'üîΩ –°–≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
async def hide_keyboard(message: Message):
    await message.reply('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. \n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ /help',
                        reply_markup=ReplyKeyboardRemove())


@dp.message(F.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def process_start_command(message: Message):
    bot_info = await bot.get_me()
    await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤! üëã\n\n'
                        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è‚å®Ô∏è\n'
                        f'–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ / –∏–ª–∏ @{bot_info.username}, —Ü–≤–µ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å, –∞ –∑–∞—Ç–µ–º –∑–Ω–∞—á–µ–Ω–∏—è‚úçÔ∏è\n\n'
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: üîç\n'
                        '/hex FFFFFF\n'
                        '/rgb 255 255 255\n'
                        '@ColorConvertBot cmyk 0 0 0 0',
                        reply_markup=main_keyboard
                        )


@dp.inline_query()
async def inline_mode(inline_query: InlineQuery):
    try:
        jsonquery = loads(str(inline_query))
        query: str = jsonquery['query']
        query_id: str = jsonquery['id']
        scheme: list[str] = query.split(' ')
        response = None  # –û–±—ä—è–≤–∏–º –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–µ—Ç—á–∫–µ–π—Å–∞ –¥—Ä–æ–ø–∞–ª–∏—Å—å —Å—é–¥–∞

        match scheme[0].lower():
            case 'rgb':
                r, g, b = scheme[1], scheme[2], scheme[3]
                if 0 <= int(r) <= 255 and 0 <= int(g) <= 255 and 0 <= int(b) <= 255:
                    response = await async_requests.get_by_rgb(r, g, b)
            case 'hex':
                hex_ = scheme[1]
                if len(hex_) == 6 or len(hex_) == 3:
                    response = await async_requests.get_by_hex(hex_)
            case 'cmyk':
                c, m, y, k = scheme[1], scheme[2], scheme[3], scheme[4]
                if 0 <= int(c) <= 100 and 0 <= int(m) <= 100 and 0 <= int(y) <= 100 and 0 <= int(k) <= 100:
                    response = await async_requests.get_by_cmyk(c, m, y, k)

            case 'year':
                await bot.answer_inline_query(query_id,
                                              [InlineQueryResultPhoto(
                                                  type=InlineQueryResultType.PHOTO,
                                                  id=str(int(query_id) + 1),
                                                  photo_url=f'{ans_pic}A47864/A47864.jpeg',
                                                  thumbnail_url=f'{ans_pic}A47864/A47864.jpeg',
                                                  caption=f'‚ú®Pantone: 17-1230\n'
                                                          f'‚ú®HEX: #A47864\n'
                                                          f'‚ú®RGB: 164 120 100\n'
                                                          f'‚ú®CMYK: 0 27 39 36\n'
                                                          f'‚ú®{ans_url}A47864',
                                                  title=f'–° —Ñ–æ—Ç–æ',
                                                  description=f'Pantone: 17-1230\n'
                                                              f'HEX: #A47864\n'
                                                              f'RGB: 164 120 100\n'
                                                              f'CMYK: 0 27 39 36'
                                              ),
                                                  InlineQueryResultArticle(
                                                      id=str(int(query_id) + 2),
                                                      type=InlineQueryResultType.ARTICLE,
                                                      title=f'–ë–µ–∑ —Ñ–æ—Ç–æ',
                                                      input_message_content=InputTextMessageContent(
                                                          message_text=f'‚ú®Pantone: 17-1230\n'
                                                                       f'‚ú®HEX: #A47864\n'
                                                                       f'‚ú®RGB: 164 120 100\n'
                                                                       f'‚ú®CMYK: 0 27 39 36\n'
                                                                       f'‚ú®{ans_url}A47864'),
                                                      hide_url=True,
                                                      description=f'Pantone: 17-1230\n'
                                                                  f'HEX: #A47864\n'
                                                                  f'RGB: 164 120 100\n'
                                                                  f'CMYK: 0 27 39 36'
                                                  )])
                return

        response_hex = str(response['hex']['clean']).upper()
        response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
        response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
        response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
        response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
        response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
        response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
        response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
        await bot.answer_inline_query(query_id,
                                      [InlineQueryResultPhoto(
                                          type=InlineQueryResultType.PHOTO,
                                          id=str(int(query_id) + 1),
                                          photo_url=f'{ans_pic}{response_hex}/{response_hex}.jpeg',
                                          thumbnail_url=f'{ans_pic}{response_hex}/{response_hex}.jpeg',
                                          caption=f'‚ú®HEX: #{response_hex}\n'
                                                  f'‚ú®RGB: {response_r} {response_g} {response_b}\n'
                                                  f'‚ú®CMYK: {response_c} {response_m} {response_y} {response_k}\n'
                                                  f'‚ú®{ans_url}{response_hex}',
                                          title=f'–° —Ñ–æ—Ç–æ',
                                          description=f'HEX: #{response_hex}\n'
                                                      f'RGB: {response_r} {response_g} {response_b}\n'
                                                      f'CMYK: {response_c} {response_m} {response_y} {response_k}'
                                      ),
                                          InlineQueryResultArticle(
                                              id=str(int(query_id) + 2),
                                              type=InlineQueryResultType.ARTICLE,
                                              title=f'–ë–µ–∑ —Ñ–æ—Ç–æ',
                                              input_message_content=InputTextMessageContent(
                                                  message_text=f'‚ú®HEX: #{response_hex}\n'
                                                               f'‚ú®RGB: {response_r} {response_g} {response_b}\n'
                                                               f'‚ú®CMYK: {response_c} {response_m} {response_y} {response_k}\n'
                                                               f'‚ú®{ans_url}{response_hex}'),
                                              hide_url=True,
                                              description=f'HEX: #{response_hex}\n'
                                                          f'RGB: {response_r} {response_g} {response_b}\n'
                                                          f'CMYK: {response_c} {response_m} {response_y} {response_k}',
                                          )])

    except Exception as e:
        await bot.send_message(ADMIN_ID,
                               f'{'@' + inline_query.from_user.username if inline_query.from_user.username else 'tg://openmessage?user_id=' + str(inline_query.from_user.id)}\n{e}')


@dp.message()
async def send_echo(message: Message):
    await message.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüòî\n–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')


async def send_rgb_message(message: Message, response: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏. –í—ã—Ä–µ–∑–∞–Ω–æ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π process_..._command
    –≠—Ç–æ –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å, –Ω–æ —ç—Ç–æ —É–∂–µ –ª—É—á—à–µ, —á–µ–º –±—ã–ª–æ –¥–æ —ç—Ç–æ–≥–æ
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
    :param response: –¥–∞–Ω–Ω—ã–µ —Å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    :return: None
    """

    response_hex = str(response['hex']['clean']).upper()
    response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
    response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
    response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
    response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
    response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
    response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
    response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
    try:

        photo_bytes = await async_requests.get_photo_by_hex(response_hex)
        await message.reply_photo(photo=BufferedInputFile(photo_bytes, "output.txt"),
                                  caption=f'‚ú®HEX: #{response_hex}\n'
                                          f'‚ú®RGB: {response_r} {response_g} {response_b}\n'
                                          f'‚ú®CMYK: {response_c} {response_m} {response_y} {response_k}\n'
                                          f'‚ú®{ans_url}{response_hex}', reply_markup=main_keyboard)
    except TelegramBadRequest as e:
        await bot.send_message(ADMIN_ID,
                               f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
        await message.reply(
            'Telegram –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.',
            reply_markup=main_keyboard)
        await message.reply(
            f'‚ú®HEX: #{response_hex}\n'
            f'‚ú®RGB: {response_r} {response_g} {response_b}\n'
            f'‚ú®CMYK: {response_c} {response_m} {response_y} {response_k}\n'
            f'‚ú®{ans_url}{response_hex}', reply_markup=main_keyboard)

    except Exception as e:
        await bot.send_message(ADMIN_ID,
                               f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
        await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)


async def on_startup():
    bot_info = await bot.get_me()
    await bot.send_message(ADMIN_ID, f'–ë–æ—Ç @{bot_info.username} –≤–∫–ª—é—á—ë–Ω')


async def on_shutdown():
    bot_info = await bot.get_me()
    await bot.send_message(ADMIN_ID, f'–ë–æ—Ç @{bot_info.username} –≤—ã–∫–ª—é—á–µ–Ω')


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
