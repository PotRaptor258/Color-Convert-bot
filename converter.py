import asyncio
import logging

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import *
from aiogram.enums.inline_query_result_type import InlineQueryResultType
from aiogram.types import Message, FSInputFile, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove, InlineQuery, \
    InlineQueryResultPhoto, InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from convertertoken import BOT_TOKEN, ADMIN_ID


# –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –º–∞—à–∏–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é)
class RGBForm(StatesGroup):
    count = State()


class HEXForm(StatesGroup):
    count = State()


class CMYKForm(StatesGroup):
    count = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)
# –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫
api_url = 'https://www.thecolorapi.com/id?'
ans_url = 'https://whatcolor.ru/color/'
ans_pic = 'https://dummyimage.com/500x500/'
# –ó–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≥–æ–¥–∞ –æ—Ç Pantone, –º–µ–Ω—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∫–∞–∂–¥—ã–π –≥–æ–¥
year_pantone = '17-1230'
year_rgb = '164 120 100'
year_hex = 'A47864'
year_cmyk = '0 27 39 36'
# –ú–µ–Ω—é –±–æ—Ç–∞
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üé® –ò–∑ RGB'), KeyboardButton(text='üé® –ò–∑ CMYK'),
     KeyboardButton(text='üé® –ò–∑ HEX')],
    [KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), KeyboardButton(text='üåà–¶–≤–µ—Ç 2025 –≥–æ–¥–∞'),
     KeyboardButton(text='üîΩ –°–≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')]
], resize_keyboard=True)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(F.text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def process_start_button(message: Message):
    bot_info = await bot.get_me()
    await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤! üëã\n\n'
                        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è‚å®Ô∏è\n'
                        f'–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ / –∏–ª–∏ @{bot_info.username}, —Ü–≤–µ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å, –∞ –∑–∞—Ç–µ–º –∑–Ω–∞—á–µ–Ω–∏—è‚úçÔ∏è\n\n'
                        '–ù–∞–ø—Ä–∏–º–µ—Ä: üîç\n'
                        '/hex FFFFFF\n'
                        '/rgb 255 255 255\n'
                        f'@{bot_info.username} cmyk 0 0 0 0',
                        reply_markup=main_keyboard
                        )


@dp.message(Command(commands=['start']))
async def process_start_command(message: Message, command: CommandObject):
    bot_info = await bot.get_me()
    if command.args:
        args = command.args.split('_')
    else:
        args = False
    if not args:
        await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤! üëã\n\n'
                            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è‚å®Ô∏è\n'
                            f'–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ / –∏–ª–∏ @{bot_info.username}, —Ü–≤–µ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å, –∞ –∑–∞—Ç–µ–º –∑–Ω–∞—á–µ–Ω–∏—è‚úçÔ∏è\n\n'
                            '–ù–∞–ø—Ä–∏–º–µ—Ä: üîç\n'
                            '/hex FFFFFF\n'
                            '/rgb 255 255 255\n'
                            f'@{bot_info.username} cmyk 0 0 0 0',
                            reply_markup=main_keyboard
                            )
    else:
        if args[0].lower() == 'year':
            await message.reply_photo(photo=FSInputFile('year.png'),
                                      caption=f'‚ú® Pantone: {year_pantone}\n'
                                              f'‚ú® HEX: #{year_hex}\n'
                                              f'‚ú® RGB: {year_rgb}\n'
                                              f'‚ú® CMYK: {year_cmyk}\n\n'
                                              f'üîó {ans_url}{year_hex}\n'
                                              f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=year',
                                      reply_markup=main_keyboard)
        else:
            if args[0].lower() == 'rgb':
                r, g, b = args[1], args[2], args[3]
                if 0 <= int(r) <= 255 and 0 <= int(g) <= 255 and 0 <= int(b) <= 255:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(f'{api_url}rgb=rgb({r},{g},{b})') as response_:
                            response = await response_.json()
                        async with session.get(
                                f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                            photo = await response_2.content.read()

            elif args[0].lower() == 'hex':
                hex = args[1]
                if len(hex) == 6 or len(hex) == 3:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(f'{api_url}hex={hex}') as response_:
                            response = await response_.json()
                        async with session.get(
                                f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                            photo = await response_2.content.read()

            elif args[0].lower() == 'cmyk':
                c, m, y, k = args[1], args[2], args[3], args[4]
                if 0 <= int(c) <= 100 and 0 <= int(m) <= 100 and 0 <= int(y) <= 100 and 0 <= int(k) <= 100:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(f'{api_url}cmyk=cmyk({c},{m},{y},{k})') as response_:
                            response = await response_.json()
                        async with session.get(
                                f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                            photo = await response_2.content.read()

            try:
                response_hex = str(response['hex']['clean']).upper()
                response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
                response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
                response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
                response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
                response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
                response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
                response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']

                await message.reply_photo(photo=BufferedInputFile(photo, 'output.png'),
                                          caption=
                                          f'‚ú® HEX: #{response_hex}\n'
                                          f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                          f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                          f'üîó {ans_url}{response_hex}\n'
                                          f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                                          reply_markup=main_keyboard)
            except ValueError:
                await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤! üëã\n\n'
                                    '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è‚å®Ô∏è\n'
                                    f'–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ / –∏–ª–∏ @{bot_info.username}, —Ü–≤–µ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å, –∞ –∑–∞—Ç–µ–º –∑–Ω–∞—á–µ–Ω–∏—è‚úçÔ∏è\n\n'
                                    '–ù–∞–ø—Ä–∏–º–µ—Ä: üîç\n'
                                    '/hex FFFFFF\n'
                                    '/rgb 255 255 255\n'
                                    f'@{bot_info.username} cmyk 0 0 0 0',
                                    reply_markup=main_keyboard
                                    )
            except IndexError:
                await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤! üëã\n\n'
                                    '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è‚å®Ô∏è\n'
                                    f'–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ / –∏–ª–∏ @{bot_info.username}, —Ü–≤–µ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å, –∞ –∑–∞—Ç–µ–º –∑–Ω–∞—á–µ–Ω–∏—è‚úçÔ∏è\n\n'
                                    '–ù–∞–ø—Ä–∏–º–µ—Ä: üîç\n'
                                    '/hex FFFFFF\n'
                                    '/rgb 255 255 255\n'
                                    f'@{bot_info.username} cmyk 0 0 0 0',
                                    reply_markup=main_keyboard
                                    )
            except Exception as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)


# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    bot_info = await bot.get_me()
    await message.reply(f'üìã–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                        f'/start, /help;\n\n'
                        f'/hex HEX –∏–ª–∏ @{bot_info.username} hex HEX,\n'
                        f'–≥–¥–µ HEX - 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F;\n\n'
                        f'/rgb R G B –∏–ª–∏ @{bot_info.username} rgb R G B,\n'
                        f'–≥–¥–µ R, G, B - —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ –¥–æ 255;\n\n'
                        f'/cmyk C M Y K –∏–ª–∏ @{bot_info.username} cmyk C M Y K,\n'
                        f'–≥–¥–µ C, M, Y, K - —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100;\n\n'
                        f'/year –∏–ª–∏ @{bot_info.username} year;',
                        reply_markup=main_keyboard
                        )


# –ö–æ–º–∞–Ω–¥–∞ "/hex hex", –≥–¥–µ hex - 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F
@dp.message(Command(commands=['hex']))
async def process_hex_command(message: Message):
    bot_info = await bot.get_me()
    hex = None
    try:
        # –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        _, hex = message.text.split()
    except ValueError:
        await message.reply(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nHEX-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F.',
            reply_markup=main_keyboard)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—á–∏—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
    if hex:
        if len(hex) == 6 or len(hex) == 3:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π hex, r,g,b, c,m,y,k
                async with session.get(f'{api_url}hex={hex}') as response_:
                    response = await response_.json()
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
                async with session.get(
                        f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                    photo = await response_2.content.read()
            response_hex = str(response['hex']['clean']).upper()
            # –ó–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
            response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
            response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
            response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
            response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
            response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
            response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
                await message.reply_photo(photo=BufferedInputFile(photo, 'output.png'),
                                          caption=
                                          f'‚ú® HEX: #{response_hex}\n'
                                          f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                          f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                          f'üîó {ans_url}{response_hex}\n'
                                          f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                                          reply_markup=main_keyboard)
            except TelegramBadRequest as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply(
                    'Telegram –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.',
                    reply_markup=main_keyboard)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É–¥–∞—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ(–∑–∞–≤–∏—Å–∏—Ç –æ—Ç API —Ñ–æ—Ç–æ)
                await message.reply(
                    f'‚ú® HEX: #{response_hex}\n'
                    f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                    f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                    f'üîó {ans_url}{response_hex}\n'
                    f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                    reply_markup=main_keyboard)

            except Exception as e:
                # –í–ª–∞–¥–µ–ª–µ—Ü —É–∑–Ω–∞—ë—Ç —É –∫–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –∫–∞–∫–∞—è
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)
        else:
            await message.reply(
                '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nHEX-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F.',
                reply_markup=main_keyboard)


# –ö–æ–º–∞–Ω–¥–∞ "/rgb r g b", –≥–¥–µ r,g,b - —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 255
@dp.message(Command(commands=['rgb']))
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–∞, —Å–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–≤–µ—Ä—Ö—É
async def process_rgb_command(message: Message):
    bot_info = await bot.get_me()
    r, g, b = None, None, None
    try:
        _, r, g, b = message.text.split()
    except ValueError:
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nRGB-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                            reply_markup=main_keyboard)
    # "!= None" —Ç.–∫. –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ 0, (if 0) = False, (if 0 != None) = True
    if r != None and g != None and b != None:
        if 0 <= int(r) <= 255 and 0 <= int(g) <= 255 and 0 <= int(b) <= 255:
            async with aiohttp.ClientSession() as session:
                async with session.get(f'{api_url}rgb=rgb({r},{g},{b})') as response_:
                    response = await response_.json()
                async with session.get(
                        f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                    photo = await response_2.content.read()
            response_hex = str(response['hex']['clean']).upper()
            response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
            response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
            response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
            response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
            response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
            response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
            response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
            try:
                await message.reply_photo(photo=BufferedInputFile(photo, 'output.png'),
                                          caption=
                                          f'‚ú® HEX: #{response_hex}\n'
                                          f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                          f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                          f'üîó {ans_url}{response_hex}\n'
                                          f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                                          reply_markup=main_keyboard)
            except TelegramBadRequest as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')

                await message.reply(
                    'Telegram –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.',
                    reply_markup=main_keyboard)
                await message.reply(
                    f'‚ú® HEX: #{response_hex}\n'
                    f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                    f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                    f'üîó {ans_url}{response_hex}\n'
                    f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                    reply_markup=main_keyboard)

            except Exception as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)

        else:
            await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nRGB-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                                reply_markup=main_keyboard)


# –ö–æ–º–∞–Ω–¥–∞ "/cmyk c m y k", –≥–¥–µ c,m,y,k - —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100
@dp.message(Command(commands=['cmyk']))
async def process_cmyk_command(message: Message):
    bot_info = await bot.get_me()
    c, m, y, k = None, None, None, None
    try:
        _, c, m, y, k = message.text.split()
    except ValueError:
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nCMYK-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 100.',
                            reply_markup=main_keyboard)
    if c != None and m != None and y != None and k != None:
        if 0 <= int(c) <= 100 and 0 <= int(m) <= 100 and 0 <= int(y) <= 100 and 0 <= int(k) <= 100:
            async with aiohttp.ClientSession() as session:
                async with session.get(f'{api_url}cmyk={c},{m},{y},{k}') as response_:
                    response = await response_.json()
                async with session.get(
                        f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                    photo = await response_2.content.read()
            response_hex = str(response['hex']['clean']).upper()
            response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
            response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
            response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
            response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
            response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
            response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
            response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
            try:
                await message.reply_photo(photo=BufferedInputFile(photo, 'output.png'),
                                          caption=
                                          f'‚ú® HEX: #{response_hex}\n'
                                          f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                          f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                          f'üîó {ans_url}{response_hex}\n'
                                          f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                                          reply_markup=main_keyboard)
            except TelegramBadRequest as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply(
                    'Telegram –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.',
                    reply_markup=main_keyboard)
                await message.reply(
                    f'‚ú® HEX: #{response_hex}\n'
                    f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                    f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                    f'üîó {ans_url}{response_hex}\n'
                    f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                    reply_markup=main_keyboard)

            except Exception as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)

        else:
            await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nCMYK-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 100.',
                                reply_markup=main_keyboard)


# –ö–æ–º–∞–Ω–¥–∞ "/year" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
@dp.message(F.text == 'üåà–¶–≤–µ—Ç 2025 –≥–æ–¥–∞')
@dp.message(Command(commands=['year']))
async def process_year_command(message: Message):
    bot_info = await bot.get_me()
    try:
        await message.reply_photo(photo=FSInputFile('year.png'),
                                  caption=f'‚ú® Pantone: {year_pantone}\n'
                                          f'‚ú® HEX: #{year_hex}\n'
                                          f'‚ú® RGB: {year_rgb}\n'
                                          f'‚ú® CMYK: {year_cmyk}\n\n'
                                          f'üîó {ans_url}{year_hex}\n'
                                          f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=year',
                                  reply_markup=main_keyboard)

    except Exception as e:
        await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)
        await bot.send_message(ADMIN_ID,
                               f'{'@' + message.chat.username if message.chat.username else 'tg://openmessage?user_id=' + str(message.chat.id)}\n{e}')


@dp.message(F.text == 'üé® –ò–∑ RGB')
async def button_rgb(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è R, G, B —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RGBForm.count)


@dp.message(RGBForm.count)
async def process_rgb_command(message: Message, state: FSMContext):
    bot_info = await bot.get_me()
    r, g, b = False, False, False
    try:
        # –¢–µ–ø–µ—Ä—å –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Ç–∞—é—Ç—Å—è –Ω–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        form = await state.update_data(count=message.text)
        r, g, b = map(int, form['count'].split())
    except ValueError:
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nRGB-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                            reply_markup=main_keyboard)
        await state.clear()
    if r != False and g != False and b != False:
        if 0 <= int(r) <= 255 and 0 <= int(g) <= 255 and 0 <= int(b) <= 255:
            async with aiohttp.ClientSession() as session:
                async with session.get(f'{api_url}rgb=rgb({r},{g},{b})') as response_:
                    response = await response_.json()
                async with session.get(
                        f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                    photo = await response_2.content.read()
            response_hex = str(response['hex']['clean']).upper()
            response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
            response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
            response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
            response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
            response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
            response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
            response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
            try:
                await message.reply_photo(photo=BufferedInputFile(photo, 'output.png'),
                                          caption=
                                          f'‚ú® HEX: #{response_hex}\n'
                                          f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                          f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                          f'üîó {ans_url}{response_hex}\n'
                                          f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                                          reply_markup=main_keyboard)
                await state.clear()
            except TelegramBadRequest as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply(
                    'Telegram –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.',
                    reply_markup=main_keyboard)
                await message.reply(
                    f'‚ú® HEX: #{response_hex}\n'
                    f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                    f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                    f'üîó {ans_url}{response_hex}\n'
                    f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                    reply_markup=main_keyboard)
                await state.clear()

            except Exception as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)
                await state.clear()
        else:
            await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nRGB-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 255.',
                                reply_markup=main_keyboard)
            await state.clear()


@dp.message(F.text == 'üé® –ò–∑ HEX')
async def button_hex(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ HEX", reply_markup=ReplyKeyboardRemove())
    await state.set_state(HEXForm.count)


@dp.message(HEXForm.count)
async def process_hex_command(message: Message, state: FSMContext):
    bot_info = await bot.get_me()
    hex = False
    try:
        form = await state.update_data(count=message.text)
        hex = form['count']
    except ValueError:
        await message.reply(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nHEX-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F.',
            reply_markup=main_keyboard)
        await state.clear()
    if hex != False:
        if len(hex) == 6 or len(hex) == 3:
            async with aiohttp.ClientSession() as session:
                async with session.get(f'{api_url}hex={hex}') as response_:
                    response = await response_.json()
                async with session.get(
                        f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                    photo = await response_2.content.read()
            response_hex = str(response['hex']['clean']).upper()
            response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
            response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
            response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
            response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
            response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
            response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
            response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
            try:
                await message.reply_photo(photo=BufferedInputFile(photo, 'output.png'),
                                          caption=
                                          f'‚ú® HEX: #{response_hex}\n'
                                          f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                          f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                          f'üîó {ans_url}{response_hex}\n'
                                          f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                                          reply_markup=main_keyboard)
                await state.clear()
            except TelegramBadRequest as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply(
                    'Telegram –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.',
                    reply_markup=main_keyboard)
                await message.reply(
                    f'‚ú® HEX: #{response_hex}\n'
                    f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                    f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                    f'üîó {ans_url}{response_hex}\n'
                    f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                    reply_markup=main_keyboard)
                await state.clear()

            except Exception as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)
                await state.clear()
        else:
            await message.reply(
                '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nHEX-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0 –¥–æ 9 –∏ –æ—Ç A –¥–æ F.',
                reply_markup=main_keyboard)
            await state.clear()


@dp.message(F.text == 'üé® –ò–∑ CMYK')
async def button_cmyk(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è C, M, Y, K —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CMYKForm.count)


@dp.message(CMYKForm.count)
async def process_cmyk_command(message: Message, state: FSMContext):
    bot_info = await bot.get_me()
    c, m, y, k = False, False, False, False
    try:
        form = await state.update_data(count=message.text)
        c, m, y, k = map(int, form['count'].split())
    except ValueError:
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå\nCMYK-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 100.',
                            reply_markup=main_keyboard)
        await state.clear()
    if c != False and m != False and y != False and k != False:
        if 0 <= int(c) <= 100 and 0 <= int(m) <= 100 and 0 <= int(y) <= 100 and 0 <= int(k) <= 100:
            async with aiohttp.ClientSession() as session:
                async with session.get(f'{api_url}cmyk={c},{m},{y},{k}') as response_:
                    response = await response_.json()
                async with session.get(
                        f'{ans_pic}{str(response['hex']['clean']).upper()}/{str(response['hex']['clean']).upper()}.png') as response_2:
                    photo = await response_2.content.read()
            response_hex = str(response['hex']['clean']).upper()
            response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
            response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
            response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
            response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
            response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
            response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
            response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
            try:
                await message.reply_photo(photo=BufferedInputFile(photo, 'output.png'),
                                          caption=
                                          f'‚ú® HEX: #{response_hex}\n'
                                          f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                          f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                          f'üîó {ans_url}{response_hex}\n'
                                          f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                                          reply_markup=main_keyboard)
                await state.clear()
            except TelegramBadRequest as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply(
                    'Telegram –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.',
                    reply_markup=main_keyboard)
                await message.reply(
                    f'‚ú® HEX: #{response_hex}\n'
                    f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                    f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                    f'üîó {ans_url}{response_hex}\n'
                    f'üì§ t.me/share/url?url=t.me/{bot_info.username}/?start=hex_{response_hex}',
                    reply_markup=main_keyboard)
                await state.clear()

            except Exception as e:
                await bot.send_message(ADMIN_ID,
                                       f'{'@' + message.from_user.username if message.from_user.username else 'tg://openmessage?user_id=' + str(message.from_user.id)}\n{e}')
                await message.reply('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞‚ùå', reply_markup=main_keyboard)
                await state.clear()
        else:
            await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\nCMYK-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 100.',
                                reply_markup=main_keyboard)
            await state.clear()


@dp.message(F.text == 'üîΩ –°–≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
async def hide_keyboard(message: Message):
    await message.reply('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. \n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ /help',
                        reply_markup=ReplyKeyboardRemove())


# –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ "@botusername_bot system values", –≥–¥–µ system - rgb, hex, cmyk –∏–ª–∏ year, values - r,g,b, hex –∏–ª–∏ c,m,y,k –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç system
@dp.inline_query()
async def inline_mode(inline_query: InlineQuery):
    bot_info = await bot.get_me()
    check = True
    scheme = []
    query_id = ''
    try:
        query = inline_query.query
        query_id = inline_query.id
        scheme = query.split()
    except ValueError:
        pass
    except Exception as e:
        await bot.send_message(ADMIN_ID,
                               f'{'@' + inline_query.from_user.username if inline_query.from_user.username else 'tg://openmessage?user_id=' + str(inline_query.from_user.id)}\n{e}')
    if bool(scheme) and bool(query_id):
        try:
            if scheme[0].lower() == 'rgb':
                r, g, b = scheme[1], scheme[2], scheme[3]
                if 0 <= int(r) <= 255 and 0 <= int(g) <= 255 and 0 <= int(b) <= 255:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(f'{api_url}rgb=rgb({r},{g},{b})') as response_:
                            response = await response_.json()

            elif scheme[0].lower() == 'hex':
                hex = scheme[1]
                if len(hex) == 6 or len(hex) == 3:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(f'{api_url}hex={hex}') as response_:
                            response = await response_.json()

            elif scheme[0].lower() == 'cmyk':
                c, m, y, k = scheme[1], scheme[2], scheme[3], scheme[4]
                if 0 <= int(c) <= 100 and 0 <= int(m) <= 100 and 0 <= int(y) <= 100 and 0 <= int(k) <= 100:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(f'{api_url}cmyk=cmyk({c},{m},{y},{k})') as response_:
                            response = await response_.json()

            elif scheme[0].lower() == 'year':
                pass

            else:
                check = False

            if check and scheme[0].lower() != 'year':
                response_hex = str(response['hex']['clean']).upper()
                response_r = 0 if response['rgb']['r'] is None else response['rgb']['r']
                response_g = 0 if response['rgb']['g'] is None else response['rgb']['g']
                response_b = 0 if response['rgb']['b'] is None else response['rgb']['b']
                response_c = 0 if response['cmyk']['c'] is None else response['cmyk']['c']
                response_m = 0 if response['cmyk']['m'] is None else response['cmyk']['m']
                response_y = 0 if response['cmyk']['y'] is None else response['cmyk']['y']
                response_k = 0 if response['cmyk']['k'] is None else response['cmyk']['k']
                await inline_query.answer(
                    # –û—Ç–≤–µ—Ç—ã –≤ inline-—Ä–µ–∂–∏–º–µ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Ö –≤–∏–¥–∞ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
                    [InlineQueryResultPhoto(
                        type=InlineQueryResultType.PHOTO,
                        # id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º (–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö), –¥–ª—è —ç—Ç–æ–≥–æ —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å id –∑–∞–ø—Ä–æ—Å–∞, —Ç.–∫. –æ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
                        id=str(int(query_id) + 1),
                        photo_url=f'{ans_pic}{response_hex}/{response_hex}.jpeg',
                        thumbnail_url=f'{ans_pic}{response_hex}/{response_hex}.jpeg',
                        caption=f'‚ú® HEX: #{response_hex}\n'
                                f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                f'üîó {ans_url}{response_hex}\n'
                                f'üì§ t.me/{bot_info.username}/?start=hex_{response_hex}',
                        title=f'–° —Ñ–æ—Ç–æ',
                        description=f'HEX: #{response_hex}\n'
                                    f'RGB: {response_r} {response_g} {response_b}\n'
                                    f'CMYK: {response_c} {response_m} {response_y} {response_k}'
                    ),
                        InlineQueryResultArticle(
                            id=str(int(query_id) + 2),
                            type=InlineQueryResultType.ARTICLE,
                            title=f'–ë–µ–∑ —Ñ–æ—Ç–æ',
                            input_message_content=InputTextMessageContent(
                                message_text=f'‚ú® HEX: #{response_hex}\n'
                                             f'‚ú® RGB: {response_r} {response_g} {response_b}\n'
                                             f'‚ú® CMYK: {response_c} {response_m} {response_y} {response_k}\n\n'
                                             f'üîó {ans_url}{response_hex}\n'
                                             f'üì§ t.me/{bot_info.username}/?start=hex_{response_hex}'),
                            hide_url=True,
                            description=f'HEX: #{response_hex}\n'
                                        f'RGB: {response_r} {response_g} {response_b}\n'
                                        f'CMYK: {response_c} {response_m} {response_y} {response_k}',
                        )])
            elif scheme[0].lower() == 'year':
                await inline_query.answer(
                    [InlineQueryResultPhoto(
                        type=InlineQueryResultType.PHOTO,
                        id=str(int(query_id) + 1),
                        photo_url=f'{ans_pic}{year_hex}/{year_hex}.jpeg',
                        thumbnail_url=f'{ans_pic}{year_hex}/{year_hex}.jpeg',
                        caption=f'‚ú® Pantone: {year_pantone}\n'
                                f'‚ú® HEX: #{year_hex}\n'
                                f'‚ú® RGB: {year_rgb}\n'
                                f'‚ú® CMYK: {year_cmyk}\n\n'
                                f'üîó {ans_url}{year_hex}\n'
                                f'üì§ t.me/{bot_info.username}/?start=year',
                        title=f'–° —Ñ–æ—Ç–æ',
                        description=f'Pantone: {year_pantone}\n'
                                    f'HEX: #{year_hex}\n'
                                    f'RGB: {year_rgb}\n'
                                    f'CMYK: {year_cmyk}'
                    ),
                        InlineQueryResultArticle(
                            id=str(int(query_id) + 2),
                            type=InlineQueryResultType.ARTICLE,
                            title=f'–ë–µ–∑ —Ñ–æ—Ç–æ',
                            input_message_content=InputTextMessageContent(
                                message_text=f'‚ú® Pantone: {year_pantone}\n'
                                             f'‚ú® HEX: #{year_hex}\n'
                                             f'‚ú® RGB: {year_rgb}\n'
                                             f'‚ú® CMYK: {year_cmyk}\n\n'
                                             f'üîó {ans_url}{year_hex}\n'
                                             f'üì§ t.me/{bot_info.username}/?start=year'),
                            hide_url=True,
                            description=f'Pantone: {year_pantone}\n'
                                        f'HEX: #{year_hex}\n'
                                        f'RGB: {year_rgb}\n'
                                        f'CMYK: {year_cmyk}'
                        )])

        except UnboundLocalError:
            pass
        except ValueError:
            pass
        except IndexError:
            pass
        except Exception as e:
            await bot.send_message(ADMIN_ID,
                                   f'{'@' + inline_query.from_user.username if inline_query.from_user.username else 'tg://openmessage?user_id=' + str(inline_query.from_user.id)}\n{e}')


@dp.message()
async def send_echo(message: Message):
    await message.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüòî\n–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')


async def on_startup():
    bot_info = await bot.get_me()
    await bot.send_message(ADMIN_ID, f'–ë–æ—Ç @{bot_info.username} –≤–∫–ª—é—á—ë–Ω')


async def on_shutdown():
    bot_info = await bot.get_me()
    await bot.send_message(ADMIN_ID, f'–ë–æ—Ç @{bot_info.username} –≤—ã–∫–ª—é—á–µ–Ω')


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
